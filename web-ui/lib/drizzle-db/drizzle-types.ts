import { db, schema, Database } from './connection';
import {
  documentProperty,
  documentUnits,
  emails,
  emailAttachments,
  keyPointsDetails,
  callToActionDetails,
  callToActionCategory,
  callToActionResponseDetails,
  violationDetails,
  emailPropertyType,
  complianceScoresDetails,
  documentRelationship,
  callToActionDetailsCallToActionResponse,
} from '@/drizzle/schema';
import { FirstParameter } from '../typescript';

/**
 * Represents the type of the database object.
 * This type is generated by Drizzle ORM and corresponds to the database instance.
 */
export type DatabaseType = typeof db;

/**
 * Represents the type of the schema object.
 * This type is generated by Drizzle ORM and corresponds to the database schema.
 */
export type SchemaType = typeof schema;

/**
 * Represents the inferred select type for the `documentUnits` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `documentUnits` table.
 */
export type DocumentUnitType = typeof documentUnits.$inferSelect;

/**
 * Represents the inferred select type for the `documentProperty` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `documentProperty` table.
 */
export type DocumentPropertyType = typeof documentProperty.$inferSelect;

/**
 * Represents the inferred select type for the `emailPropertyType` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `emailPropertyType` table.
 */
export type DocumentPropertyTypeType = typeof emailPropertyType.$inferSelect;

/**
 * Represents the inferred select type for the `documentRelationship` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `documentRelationship` table.
 */
export type DocumentRelationshipType = typeof documentRelationship.$inferSelect;

/**
 * Represents the inferred select type for the `emails` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `emails` table.
 */
export type EmailType = typeof emails.$inferSelect;

/**
 * Represents the inferred select type for the `emailAttachments` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `emailAttachments` table.
 */
export type EmailAttachmentType = typeof emailAttachments.$inferSelect;

/**
 * Represents the inferred select type for the `keyPointsDetails` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `keyPointsDetails` table.
 */
export type KeyPointType = typeof keyPointsDetails.$inferSelect;

/**
 * Represents the inferred select type for the `callToActionDetails` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `callToActionDetails` table.
 */
export type CallToActionType = typeof callToActionDetails.$inferSelect;

/**
 * Represents the inferred select type for the `callToActionCategory` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `callToActionCategory` table.
 */
export type CallToActionCategoryType = typeof callToActionCategory.$inferSelect;

/**
 * Represents the inferred select type for the `callToActionResponseDetails` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `callToActionResponseDetails` table.
 */
export type CallToActionResponseType =
  typeof callToActionResponseDetails.$inferSelect;

/**
 * Represents the inferred select type for the `callToActionDetailsCallToActionResponse` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `callToActionDetailsCallToActionResponse` table.
 */
export type CallToActionResponsiveActionLinkType =
  typeof callToActionDetailsCallToActionResponse.$inferSelect;

/**
 * Represents the inferred select type for the `violationDetails` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `violationDetails` table.
 */
export type ViolationDetailsType = typeof violationDetails.$inferSelect;

/**
 * Represents the inferred select type for the `complianceScoresDetails` table.
 * This type is generated by Drizzle ORM and corresponds to the shape of a row
 * returned when selecting from the `complianceScoresDetails` table.
 */
export type ComplianceScoreType = typeof complianceScoresDetails.$inferSelect;

/**
 * Represents a mapping of query builders for each table in the database.
 * Each key corresponds to a table, and the value is the shape of the query builder.
 */
export type QueryBuilders = {
  [K in keyof DatabaseType['query']]: FirstParameter<
    Database['query'][K]['findFirst']
  >;
};

/**
 * Represents the query shape for the `documentUnits` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type DocumentUnitQueryShape = QueryBuilders['documentUnits'];

/**
 * Represents the query shape for the `documentProperty` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type DocumentPropertyQueryShape = QueryBuilders['documentProperty'];

/**
 * Represents the query shape for the `emails` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type EmailQueryShape = QueryBuilders['emails'];

/**
 * Represents the query shape for the `emailAttachments` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type EmailAttachmentQueryShape = QueryBuilders['emailAttachments'];

/**
 * Represents the query shape for the `keyPointsDetails` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type KeyPointQueryShape = QueryBuilders['keyPointsDetails'];

/**
 * Represents the query shape for the `callToActionDetails` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type CallToActionQueryShape = QueryBuilders['callToActionDetails'];

/**
 * Represents the query shape for the `callToActionCategory` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type CallToActionCategoryQueryShape =
  QueryBuilders['callToActionCategory'];

/**
 * Represents the query shape for the `callToActionResponseDetails` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type CallToActionResponseQueryShape =
  QueryBuilders['callToActionResponseDetails'];

/**
 * Represents the query shape for the `violationDetails` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type ViolationDetailsQueryShape = QueryBuilders['violationDetails'];

/**
 * Represents the query shape for the `complianceScoresDetails` table.
 * This type corresponds to the parameters used in query operations for the table.
 */
export type ComplianceScoresDetailsQueryShape =
  QueryBuilders['complianceScoresDetails'];

/**
 * Represents the type of transaction context or callback signature used in database transactions.
 *
 * @see Database['transaction']
 * @template T - The type of the transaction context or callback parameter.
 */
export type DbTransactionType = FirstParameter<
  FirstParameter<Database['transaction']>
>;
