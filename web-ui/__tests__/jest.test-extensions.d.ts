/**
 * Jest Test Extensions Module
 *
 * This module provides TypeScript declarations for Jest test utilities that extend
 * the testing environment with additional capabilities for configuring and manipulating
 * test state. These extensions are specifically designed to support comprehensive
 * testing of authentication flows, session management, and user state in Next.js applications.
 *
 * The extensions allow direct manipulation of session values returned by the auth()
 * function, enabling precise control over authentication state during testing without
 * requiring complex mocking setups.
 *
 * @module @/__tests__/jest.test-extensions
 * @example
 * ```typescript
 * import { useJestTestExtensions } from '@/__tests__/jest.test-extensions';
 *
 * // In a test setup or individual test
 * const testExtensions = useJestTestExtensions();
 *
 * // Configure a mock authenticated session
 * testExtensions.session = {
 *   id: 'test-session-id',
 *   user: {
 *     id: 'user-123',
 *     name: 'Test User',
 *     email: 'test@example.com',
 *     subject: 'test-subject'
 *   },
 *   expires: '2025-12-31T23:59:59.000Z'
 * };
 *
 * // Clear session for testing unauthenticated states
 * testExtensions.session = null;
 * ```
 */
declare module '@/__tests__/jest.test-extensions' {
  /**
   * Jest Test Extensions Interface
   *
   * Provides a comprehensive set of utilities for configuring and manipulating
   * test environment state. This interface serves as the primary API for
   * test extensions that need to interact with authentication, session management,
   * and other application state during testing.
   *
   * @interface JestTestExtensions
   */
  type JestTestExtensions = {
    /**
     * Session State Management
     *
     * Provides direct access to the session object returned by the auth() function.
     * This property allows tests to directly manipulate session state without
     * requiring complex mocking of authentication providers or session stores.
     *
     * Setting this property to a session object simulates an authenticated user,
     * while setting it to null simulates an unauthenticated state. This is
     * particularly useful for testing authentication-dependent features,
     * authorization logic, and user-specific behavior.
     *
     * @type {SessionData | null}
     * @example
     * ```typescript
     * // Simulate authenticated user
     * testExtensions.session = {
     *   id: 'session-123',
     *   user: {
     *     id: 'user-456',
     *     name: 'John Doe',
     *     email: 'john@example.com',
     *     subject: 'john-doe-subject',
     *     image: 'https://example.com/avatar.jpg'
     *   },
     *   expires: '2025-12-31T23:59:59.000Z'
     * };
     *
     * // Simulate unauthenticated state
     * testExtensions.session = null;
     * ```
     */
    session: SessionData | null;
  };

  /**
   * Session Data Structure
   *
   * Represents the complete session information returned by authentication providers.
   * This structure mirrors the session object used throughout the application and
   * includes all necessary fields for comprehensive session state management.
   *
   * @typedef {Object} SessionData
   * @property {string} id - Unique identifier for the session
   * @property {UserData} user - User information associated with the session
   * @property {string} expires - ISO 8601 timestamp indicating when the session expires
   */
  type SessionData = {
    /**
     * Session Identifier
     *
     * A unique string that identifies this specific session. This ID is typically
     * generated by the authentication provider and used for session tracking,
     * invalidation, and management across requests.
     *
     * @type {string}
     */
    id: string;

    /**
     * User Information
     *
     * Complete user profile data associated with the authenticated session.
     * This object contains all user attributes that may be required by
     * the application for personalization, authorization, and user-specific features.
     *
     * @type {UserData}
     */
    user: UserData;

    /**
     * Session Expiration Timestamp
     *
     * ISO 8601 formatted timestamp indicating when this session will expire.
     * The application should check this value to determine if the session
     * is still valid or needs to be refreshed/renewed.
     *
     * @type {string}
     * @example "2025-12-31T23:59:59.000Z"
     */
    expires: string;
  };

  /**
   * User Data Structure
   *
   * Contains comprehensive user information for authenticated sessions.
   * This structure supports various authentication providers and includes
   * both required and optional user attributes.
   *
   * @typedef {Object} UserData
   * @property {string} id - Unique user identifier
   * @property {string} name - User's display name
   * @property {string} email - User's email address
   * @property {string} subject - Authentication provider's subject identifier
   * @property {string} [image] - Optional profile image URL
   */
  type UserData = {
    /**
     * User Identifier
     *
     * A unique identifier for the user, typically provided by the authentication
     * provider. This ID should be consistent across sessions and can be used
     * as a primary key in user-related database operations.
     *
     * @type {string}
     */
    id: string;

    /**
     * Display Name
     *
     * The user's full display name as provided by the authentication provider.
     * This is typically used for UI display purposes and user identification
     * in the application's interface.
     *
     * @type {string}
     */
    name: string;

    /**
     * Email Address
     *
     * The user's email address, which serves as both an identifier and
     * a communication channel. This field is commonly used for notifications,
     * password reset flows, and user verification processes.
     *
     * @type {string}
     */
    email: string;

    /**
     * Authentication Subject
     *
     * The subject identifier provided by the authentication provider (e.g., OAuth sub claim).
     * This is typically a unique, immutable identifier that can be used for
     * cross-system user identification and linking.
     *
     * @type {string}
     */
    subject: string;

    /**
     * Profile Image URL
     *
     * Optional URL pointing to the user's profile image or avatar.
     * When present, this can be used to display user avatars throughout
     * the application. When absent, the application should provide
     * a default avatar or placeholder.
     *
     * @type {string}
     * @optional
     */
    image?: string;
  };

  /**
   * Jest Test Extensions Hook
   *
   * Returns an instance of JestTestExtensions that provides access to
   * test environment configuration utilities. This function serves as
   * the primary entry point for accessing test extensions in Jest test files.
   *
   * The returned object allows direct manipulation of application state
   * that would normally be managed by external systems (authentication providers,
   * session stores, etc.), enabling deterministic testing of state-dependent behavior.
   *
   * @function useJestTestExtensions
   * @returns {JestTestExtensions} An object containing test extension utilities
   * @example
   * ```typescript
   * import { useJestTestExtensions } from '@/__tests__/jest.test-extensions';
   *
   * describe('MyComponent', () => {
   *   let testExtensions: JestTestExtensions;
   *
   *   beforeEach(() => {
   *     testExtensions = useJestTestExtensions();
   *   });
   *
   *   it('should display user name when authenticated', () => {
   *     // Arrange
   *     testExtensions.session = {
   *       id: 'test-session',
   *       user: {
   *         id: 'user-1',
   *         name: 'Alice',
   *         email: 'alice@example.com',
   *         subject: 'alice-subject'
   *       },
   *       expires: '2025-12-31T23:59:59.000Z'
   *     };
   *
   *     // Act & Assert
   *     // ... test implementation
   *   });
   *
   *   it('should show login prompt when unauthenticated', () => {
   *     // Arrange
   *     testExtensions.session = null;
   *
   *     // Act & Assert
   *     // ... test implementation
   *   });
   * });
   * ```
   */
  export function useJestTestExtensions(): JestTestExtensions;
}
