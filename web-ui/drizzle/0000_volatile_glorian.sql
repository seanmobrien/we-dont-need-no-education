-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TYPE "public"."import_stage_type" AS ENUM('staged', 'headers', 'body', 'contacts', 'attachments', 'complete');--> statement-breakpoint
CREATE TYPE "public"."recipient_type" AS ENUM('to', 'cc', 'bcc');--> statement-breakpoint
CREATE TABLE "call_to_action_expected_response" (
	"call_to_action_response_id" uuid PRIMARY KEY NOT NULL,
	"call_to_action_id" uuid NOT NULL,
	"call_to_action_response_detail_id" uuid,
	"description" text NOT NULL
);
--> statement-breakpoint
CREATE TABLE "document_units" (
	"unit_id" serial PRIMARY KEY NOT NULL,
	"email_id" uuid,
	"attachment_id" integer,
	"document_property_id" uuid,
	"content" text,
	"document_type" varchar(50),
	"created_on" timestamp DEFAULT CURRENT_TIMESTAMP,
	"embedding_model" varchar(255),
	"embedded_on" timestamp,
	CONSTRAINT "document_type_check_allowed_values" CHECK ((document_type)::text = ANY (ARRAY[('email'::character varying)::text, ('attachment'::character varying)::text, ('note'::character varying)::text, ('key_point'::character varying)::text, ('cta_response'::character varying)::text, ('cta'::character varying)::text, ('sentiment'::character varying)::text, ('pending_upload'::character varying)::text, ('compliance'::character varying)::text]))) NOT VALID)
);
--> statement-breakpoint
CREATE TABLE "document_property" (
	"property_value" text,
	"document_property_type_id" integer NOT NULL,
	"property_id" uuid PRIMARY KEY NOT NULL,
	"document_id" integer NOT NULL,
	"created_on" timestamp,
	"policy_basis" text[],
	"tags" text[]
);
--> statement-breakpoint
CREATE TABLE "call_to_action_category" (
	"cta_category_id" uuid PRIMARY KEY NOT NULL,
	"category_name" text NOT NULL,
	"category_description" text NOT NULL,
	"cta_category_text_embedding" vector(1536),
	"cta_category_text_embedding_model" text
);
--> statement-breakpoint
CREATE TABLE "document_property_relation_reason" (
	"relation_reason_id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "document_property_relation_reason_relation_reason_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"description" text
);
--> statement-breakpoint
CREATE TABLE "analysis_stage" (
	"analysis_stage_id" integer PRIMARY KEY NOT NULL,
	"description" text,
	"order_by" integer
);
--> statement-breakpoint
CREATE TABLE "document_unit_analysis_stage_audit" (
	"analysis_audit_id" integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY (sequence name "document_unit_analysis_stage_audit_analysis_audit_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"document_id" integer,
	"analysis_stage_id" integer,
	"detected_points" integer,
	"timestamp" timestamp,
	"notes" integer,
	"message" text,
	"iteration" integer DEFAULT 1 NOT NULL,
	"tokens_input" integer DEFAULT 0 NOT NULL,
	"tokens_output" integer DEFAULT 0 NOT NULL,
	"completion_signalled" boolean,
	"in_post_processing_queue" boolean
);
--> statement-breakpoint
CREATE TABLE "threads" (
	"thread_id" serial PRIMARY KEY NOT NULL,
	"subject" text NOT NULL,
	"created_at" timestamp DEFAULT CURRENT_TIMESTAMP,
	"external_id" varchar(255)
);
--> statement-breakpoint
CREATE TABLE "chat_history" (
	"chat_history_id" uuid PRIMARY KEY NOT NULL,
	"timestamp" timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
	"request" text NOT NULL,
	"result" jsonb,
	"user_id" integer NOT NULL
);
--> statement-breakpoint
CREATE TABLE "accounts" (
	"id" serial PRIMARY KEY NOT NULL,
	"userId" integer NOT NULL,
	"type" varchar(255) NOT NULL,
	"provider" varchar(255) NOT NULL,
	"providerAccountId" varchar(255) NOT NULL,
	"refresh_token" text,
	"access_token" text,
	"expires_at" bigint,
	"token_type" text,
	"scope" text,
	"id_token" text,
	"session_state" text,
	CONSTRAINT "constraint_userId" UNIQUE("userId")
);
--> statement-breakpoint
CREATE TABLE "sessions" (
	"id" serial PRIMARY KEY NOT NULL,
	"sessionToken" varchar(255) NOT NULL,
	"userId" integer NOT NULL,
	"expires" timestamp with time zone NOT NULL
);
--> statement-breakpoint
CREATE TABLE "sessions_ext" (
	"session_id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "sessions_ext_session_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"token_gmail" varchar(255)
);
--> statement-breakpoint
CREATE TABLE "emails" (
	"sender_id" integer NOT NULL,
	"thread_id" integer,
	"subject" text NOT NULL,
	"email_contents" text NOT NULL,
	"sent_timestamp" timestamp DEFAULT CURRENT_TIMESTAMP,
	"imported_from_id" varchar(20),
	"global_message_id" varchar(255),
	"email_id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"parent_id" uuid
);
--> statement-breakpoint
CREATE TABLE "email_attachments" (
	"attachment_id" serial PRIMARY KEY NOT NULL,
	"file_name" text NOT NULL,
	"file_path" text NOT NULL,
	"extracted_text" text,
	"extracted_text_tsv" "tsvector",
	"policy_id" integer,
	"summary" text,
	"email_id" uuid NOT NULL,
	"mime_type" text NOT NULL,
	"size" integer NOT NULL
);
--> statement-breakpoint
CREATE TABLE "email_property_type" (
	"document_property_type_id" serial PRIMARY KEY NOT NULL,
	"email_property_category_id" integer NOT NULL,
	"property_name" varchar(100) NOT NULL,
	"created_at" timestamp DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "email_property_category" (
	"email_property_category_id" serial PRIMARY KEY NOT NULL,
	"description" varchar(50),
	"created_at" timestamp DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "contacts" (
	"contact_id" serial PRIMARY KEY NOT NULL,
	"name" varchar(255) NOT NULL,
	"email" varchar(255) NOT NULL,
	"role_dscr" varchar(100),
	"is_district_staff" boolean DEFAULT false,
	"phone" varchar(30),
	CONSTRAINT "contacts_email_key" UNIQUE("email")
);
--> statement-breakpoint
CREATE TABLE "staging_message" (
	"external_id" varchar(20),
	"stage" "import_stage_type",
	"id" uuid PRIMARY KEY NOT NULL,
	"message" "email_message_type",
	"userId" integer,
	CONSTRAINT "staging_message_external_id_key" UNIQUE("external_id")
);
--> statement-breakpoint
CREATE TABLE "users" (
	"id" serial PRIMARY KEY NOT NULL,
	"name" varchar(255),
	"email" varchar(255),
	"emailVerified" timestamp with time zone,
	"image" text
);
--> statement-breakpoint
CREATE TABLE "legal_references" (
	"reference_id" serial PRIMARY KEY NOT NULL,
	"case_name" varchar(255) NOT NULL,
	"source" varchar(255) NOT NULL,
	"policy_id" integer,
	"summary" text NOT NULL,
	"url" text
);
--> statement-breakpoint
CREATE TABLE "policy_types" (
	"policy_type_id" serial PRIMARY KEY NOT NULL,
	"type_name" varchar(50) NOT NULL,
	CONSTRAINT "policy_types_type_name_key" UNIQUE("type_name")
);
--> statement-breakpoint
CREATE TABLE "violation_details" (
	"property_id" uuid PRIMARY KEY NOT NULL,
	"attachment_id" integer,
	"key_point_property_id" uuid,
	"action_property_id" uuid,
	"violation_type" varchar(255) NOT NULL,
	"severity_level" integer,
	"detected_by" varchar(255) DEFAULT 'AI-System',
	"detected_on" timestamp DEFAULT CURRENT_TIMESTAMP
);
--> statement-breakpoint
CREATE TABLE "compliance_scores_details" (
	"property_id" uuid PRIMARY KEY NOT NULL,
	"action_property_id" uuid,
	"compliance_score" integer,
	"violations_found" integer DEFAULT 0,
	"response_delay_days" integer DEFAULT 0,
	"overall_grade" varchar(10),
	"evaluated_on" timestamp DEFAULT CURRENT_TIMESTAMP,
	"attachment_id" integer
);
--> statement-breakpoint
CREATE TABLE "email_sentiment_analysis_details" (
	"property_id" uuid PRIMARY KEY NOT NULL,
	"sentiment_score" integer,
	"detected_hostility" boolean DEFAULT false,
	"flagged_phrases" text,
	"detected_on" timestamp DEFAULT CURRENT_TIMESTAMP,
	"attachment_id" bigint
);
--> statement-breakpoint
CREATE TABLE "key_points_details" (
	"property_id" uuid PRIMARY KEY NOT NULL,
	"relevance" double precision NOT NULL,
	"compliance" double precision NOT NULL,
	"severity_ranking" integer DEFAULT '-1',
	"inferred" boolean DEFAULT false NOT NULL
);
--> statement-breakpoint
CREATE TABLE "policies_statutes" (
	"policy_id" serial PRIMARY KEY NOT NULL,
	"policy_type_id" integer NOT NULL,
	"chapter" varchar(50),
	"section" varchar(50),
	"paragraph" text,
	"description" text,
	"indexed_file_id" text,
	CONSTRAINT "indexed_file_id_unique" UNIQUE("indexed_file_id")
);
--> statement-breakpoint
CREATE TABLE "call_to_action_details" (
	"property_id" uuid PRIMARY KEY NOT NULL,
	"opened_date" date NOT NULL,
	"closed_date" date,
	"compliancy_close_date" date,
	"completion_percentage" numeric(5, 2) DEFAULT '0.0' NOT NULL,
	"inferred" boolean DEFAULT false NOT NULL,
	"compliance_date_enforceable" boolean DEFAULT false NOT NULL,
	"reasonable_request" integer,
	"reasonable_reasons" text,
	"closure_actions" text[] NOT NULL,
	"compliance_rating" double precision,
	"compliance_rating_reasons" text[],
	"sentiment" double precision NOT NULL,
	"sentiment_reasons" text[] NOT NULL,
	"severity" integer NOT NULL,
	"severity_reason" text[] NOT NULL,
	"title_ix_applicable" integer NOT NULL,
	"title_ix_applicable_reasons" text[] NOT NULL
);
--> statement-breakpoint
CREATE TABLE "call_to_action_response_details" (
	"property_id" uuid PRIMARY KEY NOT NULL,
	"response_timestamp" timestamp DEFAULT CURRENT_TIMESTAMP,
	"reasonable_reasons" text,
	"severity" integer,
	"inferred" boolean,
	"compliance_rating" double precision,
	"compliance_reasons" text,
	"reasonable_response" integer,
	"sentiment" double precision,
	"sentiment_reasons" text[],
	"severity_reasons" text[]
);
--> statement-breakpoint
CREATE TABLE "document_property_call_to_action_category" (
	"property_id" uuid NOT NULL,
	"cta_category_id" uuid NOT NULL,
	"created_on" timestamp DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT "document_property_call_to_action_category_pkey" PRIMARY KEY("property_id","cta_category_id")
);
--> statement-breakpoint
CREATE TABLE "document_unit_analysis_stage_ignore" (
	"document_id" integer NOT NULL,
	"analysis_stage_id" integer NOT NULL,
	"reason" text,
	CONSTRAINT "document_unit_analysis_stage_ignore_pkey" PRIMARY KEY("document_id","analysis_stage_id")
);
--> statement-breakpoint
CREATE TABLE "verification_tokens" (
	"identifier" text NOT NULL,
	"token" text NOT NULL,
	"expires" timestamp with time zone NOT NULL,
	CONSTRAINT "verification_tokens_pkey" PRIMARY KEY("identifier","token")
);
--> statement-breakpoint
CREATE TABLE "email_recipients" (
	"recipient_id" integer NOT NULL,
	"email_id" uuid NOT NULL,
	"recipient_type" "recipient_type" DEFAULT 'to' NOT NULL,
	CONSTRAINT "email_recipients_pkey" PRIMARY KEY("recipient_id","email_id")
);
--> statement-breakpoint
CREATE TABLE "document_property_related_document" (
	"related_property_id" uuid NOT NULL,
	"document_id" integer NOT NULL,
	"relationship_type" integer NOT NULL,
	"timestamp" time DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT "document_property_related_document_pkey" PRIMARY KEY("related_property_id","document_id","relationship_type")
);
--> statement-breakpoint
CREATE TABLE "document_unit_embeddings" (
	"document_id" integer NOT NULL,
	"index" integer NOT NULL,
	"vector" vector NOT NULL,
	"created_on" time DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT "document_unit_vector_store_pkey" PRIMARY KEY("document_id","index")
);
--> statement-breakpoint
CREATE TABLE "document_unit_analysis_function_audit" (
	"analysis_audit_id" integer NOT NULL,
	"function_num" integer NOT NULL,
	"name" text,
	"arguments" text,
	"result" text,
	CONSTRAINT "document_unit_analysis_function_audit_pkey" PRIMARY KEY("analysis_audit_id","function_num")
);
--> statement-breakpoint
CREATE TABLE "call_to_action_details_call_to_action_response" (
	"call_to_action_id" uuid NOT NULL,
	"call_to_action_response_id" uuid NOT NULL,
	"compliance_chapter_13" double precision,
	"compliance_chapter_13_reasons" text[],
	"completion_percentage" double precision,
	"completion_percentage_reasons" text[],
	"timestamp" timestamp DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT "call_to_action_details_call_to_action_response_pkey" PRIMARY KEY("call_to_action_id","call_to_action_response_id")
);
--> statement-breakpoint
CREATE TABLE "staging_attachment" (
	"staging_message_id" uuid NOT NULL,
	"partId" numeric(4, 2) NOT NULL,
	"mimeType" varchar(255),
	"storageId" varchar(2048),
	"imported" boolean DEFAULT false NOT NULL,
	"size" integer DEFAULT 0 NOT NULL,
	"attachmentId" text,
	"filename" text,
	CONSTRAINT "pk_staging_attachment" PRIMARY KEY("staging_message_id","partId")
);
--> statement-breakpoint
ALTER TABLE "call_to_action_expected_response" ADD CONSTRAINT "fk_call_to_action_id" FOREIGN KEY ("call_to_action_id") REFERENCES "public"."call_to_action_details"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "call_to_action_expected_response" ADD CONSTRAINT "fk_call_to_action_response" FOREIGN KEY ("call_to_action_response_detail_id") REFERENCES "public"."call_to_action_response_details"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_units" ADD CONSTRAINT "document_units_email_id_fkey" FOREIGN KEY ("email_id") REFERENCES "public"."emails"("email_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_units" ADD CONSTRAINT "document_units_attachment_id_fkey" FOREIGN KEY ("attachment_id") REFERENCES "public"."email_attachments"("attachment_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_units" ADD CONSTRAINT "document_units_email_property_id_fkey1" FOREIGN KEY ("document_property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_property" ADD CONSTRAINT "document_property_email_property_type" FOREIGN KEY ("document_property_type_id") REFERENCES "public"."email_property_type"("document_property_type_id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_property" ADD CONSTRAINT "document_property_emails" FOREIGN KEY ("document_id") REFERENCES "public"."document_units"("unit_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "document_unit_analysis_stage_audit" ADD CONSTRAINT "document_unit_analysis_audt_document_fk" FOREIGN KEY ("document_id") REFERENCES "public"."document_units"("unit_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_unit_analysis_stage_audit" ADD CONSTRAINT "document_unit_analysis_audit_stage_fk" FOREIGN KEY ("analysis_stage_id") REFERENCES "public"."analysis_stage"("analysis_stage_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "chat_history" ADD CONSTRAINT "fk_chat_history_user" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "sessions" ADD CONSTRAINT "FK_account" FOREIGN KEY ("userId") REFERENCES "public"."accounts"("userId") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "sessions_ext" ADD CONSTRAINT "FK_sessions_ext_sessions" FOREIGN KEY ("session_id") REFERENCES "public"."sessions"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "emails" ADD CONSTRAINT "emails_relation_1" FOREIGN KEY ("sender_id") REFERENCES "public"."contacts"("contact_id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "emails" ADD CONSTRAINT "fk_emails_parent_email" FOREIGN KEY ("parent_id") REFERENCES "public"."emails"("email_id") ON DELETE set null ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "email_attachments" ADD CONSTRAINT "email_attachments_email_fkey" FOREIGN KEY ("email_id") REFERENCES "public"."emails"("email_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "email_attachments" ADD CONSTRAINT "email_attachments_policy_id_fkey" FOREIGN KEY ("policy_id") REFERENCES "public"."policies_statutes"("policy_id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "email_property_type" ADD CONSTRAINT "email_property_type_email_property_category" FOREIGN KEY ("email_property_category_id") REFERENCES "public"."email_property_category"("email_property_category_id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "staging_message" ADD CONSTRAINT "fk_staging_message_users" FOREIGN KEY ("userId") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "legal_references" ADD CONSTRAINT "legal_references_policy_id_fkey" FOREIGN KEY ("policy_id") REFERENCES "public"."policies_statutes"("policy_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "violation_details" ADD CONSTRAINT "violation_details_action_fk" FOREIGN KEY ("action_property_id") REFERENCES "public"."call_to_action_details"("property_id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "violation_details" ADD CONSTRAINT "violation_details_attachment_fk" FOREIGN KEY ("attachment_id") REFERENCES "public"."email_attachments"("attachment_id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "violation_details" ADD CONSTRAINT "violation_details_key_point_fk" FOREIGN KEY ("key_point_property_id") REFERENCES "public"."key_points_details"("property_id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "violation_details" ADD CONSTRAINT "violation_details_property_id_fkey" FOREIGN KEY ("property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "compliance_scores_details" ADD CONSTRAINT "compliance_scores_attachment_fk" FOREIGN KEY ("attachment_id") REFERENCES "public"."email_attachments"("attachment_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "compliance_scores_details" ADD CONSTRAINT "compliance_scores_details_property_id_fkey" FOREIGN KEY ("property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "compliance_scores_details" ADD CONSTRAINT "compliance_scores_details_action_property_id_fkey" FOREIGN KEY ("action_property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "email_sentiment_analysis_details" ADD CONSTRAINT "email_sentiment_analysis_attachment" FOREIGN KEY ("attachment_id") REFERENCES "public"."email_attachments"("attachment_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "email_sentiment_analysis_details" ADD CONSTRAINT "email_sentiment_analysis_details_property_id_fkey" FOREIGN KEY ("property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "key_points_details" ADD CONSTRAINT "key_points_details_property_id_fkey" FOREIGN KEY ("property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "policies_statutes" ADD CONSTRAINT "policies_statutes_policy_type_id_fkey" FOREIGN KEY ("policy_type_id") REFERENCES "public"."policy_types"("policy_type_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "call_to_action_details" ADD CONSTRAINT "call_to_action_details_property_id_fkey" FOREIGN KEY ("property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "call_to_action_response_details" ADD CONSTRAINT "call_to_action_response_details_property_id_fkey" FOREIGN KEY ("property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_property_call_to_action_category" ADD CONSTRAINT "fk_call_to_action_cateogry_id" FOREIGN KEY ("cta_category_id") REFERENCES "public"."call_to_action_category"("cta_category_id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_property_call_to_action_category" ADD CONSTRAINT "fk_call_to_action_details_to_category" FOREIGN KEY ("property_id") REFERENCES "public"."call_to_action_details"("property_id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_property_call_to_action_category" ADD CONSTRAINT "fk_cta_category_document_property" FOREIGN KEY ("property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "email_recipients" ADD CONSTRAINT "email_recipients_email_id_fkey" FOREIGN KEY ("email_id") REFERENCES "public"."emails"("email_id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "email_recipients" ADD CONSTRAINT "email_recipients_recipient_id_fkey" FOREIGN KEY ("recipient_id") REFERENCES "public"."contacts"("contact_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_property_related_document" ADD CONSTRAINT "fk_document" FOREIGN KEY ("document_id") REFERENCES "public"."document_units"("unit_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_property_related_document" ADD CONSTRAINT "fk_property" FOREIGN KEY ("related_property_id") REFERENCES "public"."document_property"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_property_related_document" ADD CONSTRAINT "fk_relation" FOREIGN KEY ("relationship_type") REFERENCES "public"."document_property_relation_reason"("relation_reason_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_unit_embeddings" ADD CONSTRAINT "fk_document_unit" FOREIGN KEY ("document_id") REFERENCES "public"."document_units"("unit_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "document_unit_analysis_function_audit" ADD CONSTRAINT "fk_document_analysis_stage_audit" FOREIGN KEY ("analysis_audit_id") REFERENCES "public"."document_unit_analysis_stage_audit"("analysis_audit_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "call_to_action_details_call_to_action_response" ADD CONSTRAINT "fk_call_to_action_details" FOREIGN KEY ("call_to_action_id") REFERENCES "public"."call_to_action_details"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "call_to_action_details_call_to_action_response" ADD CONSTRAINT "fk_call_to_action_response" FOREIGN KEY ("call_to_action_response_id") REFERENCES "public"."call_to_action_response_details"("property_id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "staging_attachment" ADD CONSTRAINT "fk_staging_attachment_staging_message" FOREIGN KEY ("staging_message_id") REFERENCES "public"."staging_message"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
CREATE INDEX "idx_document_units_attachment" ON "document_units" USING btree ("attachment_id" int4_ops);--> statement-breakpoint
CREATE INDEX "idx_document_units_email" ON "document_units" USING btree ("email_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "document_property_property_value_trgm_idx" ON "document_property" USING gin ("property_value" gin_trgm_ops) WITH (fastupdate=true);--> statement-breakpoint
CREATE UNIQUE INDEX "document_property_unique_idx" ON "document_property" USING btree ("document_id" uuid_ops,"document_property_type_id" int4_ops,"property_id" int4_ops);--> statement-breakpoint
CREATE INDEX "idx_user_timestamp" ON "chat_history" USING btree ("user_id" int4_ops,"timestamp" int4_ops) WITH (deduplicate_items=true);--> statement-breakpoint
CREATE INDEX "fki_fk_emails_parent_email" ON "emails" USING btree ("parent_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_emails_parent" ON "emails" USING btree ("parent_id" uuid_ops);--> statement-breakpoint
CREATE UNIQUE INDEX "idx_emails_unique_desc" ON "emails" USING btree ("thread_id" uuid_ops,"sender_id" uuid_ops,"parent_id" int4_ops,"email_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "fki_email_attachments_email_fkey" ON "email_attachments" USING btree ("email_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_attachment_search" ON "email_attachments" USING gin ("extracted_text_tsv" tsvector_ops);--> statement-breakpoint
CREATE INDEX "idx_email_attachments_email_id" ON "email_attachments" USING btree ("email_id" uuid_ops);--> statement-breakpoint
CREATE UNIQUE INDEX "email_property_category_property_type_id" ON "email_property_type" USING btree ("email_property_category_id" int4_ops,"document_property_type_id" int4_ops);--> statement-breakpoint
CREATE INDEX "fki_fk_staging_message_users" ON "staging_message" USING btree ("userId" int4_ops);--> statement-breakpoint
CREATE INDEX "idx_violation_details_action_property_id" ON "violation_details" USING btree ("action_property_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_violation_details_attachment_id" ON "violation_details" USING btree ("attachment_id" int4_ops);--> statement-breakpoint
CREATE INDEX "idx_violation_details_detected_on" ON "violation_details" USING btree ("detected_on" timestamp_ops);--> statement-breakpoint
CREATE INDEX "idx_violation_details_key_point_property_id" ON "violation_details" USING btree ("key_point_property_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_compliance_scores_action_property_id" ON "compliance_scores_details" USING btree ("action_property_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_compliance_scores_evaluated_on" ON "compliance_scores_details" USING btree ("evaluated_on" timestamp_ops);--> statement-breakpoint
CREATE INDEX "idx_email_sentiment_analysis_detected_on" ON "email_sentiment_analysis_details" USING btree ("detected_on" timestamp_ops);--> statement-breakpoint
CREATE INDEX "idx_email_sentiment_analysis_sentiment_score" ON "email_sentiment_analysis_details" USING btree ("sentiment_score" int4_ops);--> statement-breakpoint
CREATE INDEX "idx_call_to_action_response_timestamp" ON "call_to_action_response_details" USING btree ("response_timestamp" timestamp_ops);--> statement-breakpoint
CREATE INDEX "fki_email_recipients_email_id_fkey" ON "email_recipients" USING btree ("email_id" uuid_ops);--> statement-breakpoint
CREATE VIEW "public"."CallToAction" AS (SELECT cta.property_id, cta.property_id AS action_property_id, cta.opened_date, cta.closed_date, cta.compliancy_close_date, cta.completion_percentage, dp.property_value AS action_description, ae.sent_timestamp AS response_timestamp, dp.document_id, cta.inferred, cta.compliance_date_enforceable, 'Initial action request'::text AS compliance_aggregate_reasons, dp.tags, dp.policy_basis FROM document_property dp JOIN call_to_action_details cta ON dp.property_id = cta.property_id JOIN document_units d ON d.unit_id = dp.document_id JOIN emails ae ON ae.email_id = d.email_id);--> statement-breakpoint
CREATE VIEW "public"."ResponsiveAction" AS (SELECT cta.property_id AS call_to_action_id, dp_cta.document_id AS call_to_action_source_document_id, ra.property_id AS responsive_action_id, dp_ra.document_id AS responsive_action_source_document_id, dp_cta.property_value AS request_contents, dp_ra.property_value AS response_contents, cta.inferred AS request_inferred, ra.inferred AS response_inferred, cta.completion_percentage AS request_completion_percentage, lnk.completion_percentage AS response_completion_percentage, lnk.completion_percentage_reasons AS response_completion_percentage_reasons, cta.opened_date AS request_opened_date, cta.compliancy_close_date AS request_compliancy_deadline, cta.compliance_date_enforceable AS enforceable_compliance_date, cta.closed_date AS request_closed_date, ra.response_timestamp AS response_date, cta.compliancy_close_date::timestamp with time zone - COALESCE(ra.response_timestamp::timestamp with time zone, CURRENT_TIMESTAMP) AS response_days_until_deadline, cta.severity AS request_severity, cta.severity_reason AS request_severity_reason, cta.title_ix_applicable, cta.title_ix_applicable_reasons, lnk.compliance_chapter_13, lnk.compliance_chapter_13_reasons, ra.severity AS response_severity, ra.severity_reasons AS response_severity_reason, ARRAY( SELECT rd.document_id FROM document_property_related_document rd WHERE rd.related_property_id = cta.property_id OR rd.related_property_id = ra.property_id) AS related_documents FROM call_to_action_details cta JOIN document_property dp_cta ON cta.property_id = dp_cta.property_id LEFT JOIN call_to_action_details_call_to_action_response lnk ON cta.property_id = lnk.call_to_action_id LEFT JOIN call_to_action_response_details ra ON lnk.call_to_action_response_id = ra.property_id LEFT JOIN document_property dp_ra ON ra.property_id = dp_ra.property_id ORDER BY dp_cta.created_on, ra.response_timestamp);--> statement-breakpoint
CREATE VIEW "public"."KeyPoints" AS (SELECT dp.document_id, du.document_type, du.email_id, ec.email_property_category_id, ec.description AS category_name, et.document_property_type_id, et.property_name, dp.property_value, e.sent_timestamp, e.subject, e.sender_id, c.name, kpd.relevance, kpd.compliance, kpd.severity_ranking, kpd.inferred, dp.policy_basis, dp.tags, dp.property_id FROM key_points_details kpd JOIN document_property dp ON kpd.property_id = dp.property_id JOIN document_units du ON dp.document_id = du.unit_id JOIN emails e ON du.email_id = e.email_id JOIN contacts c ON e.sender_id = c.contact_id JOIN email_property_type et ON dp.document_property_type_id = et.document_property_type_id JOIN email_property_category ec ON et.email_property_category_id = ec.email_property_category_id);--> statement-breakpoint
CREATE VIEW "public"."email_property" AS (SELECT dp.property_value, dp.document_property_type_id, dp.property_id, d.email_id, dp.created_on FROM document_property dp JOIN document_units d ON dp.document_id = d.unit_id);--> statement-breakpoint
CREATE VIEW "public"."DocumentWithDetails" AS (SELECT d.unit_id AS document_id, d.email_id, d.attachment_id, d.document_property_id AS property_id, d.content, d.document_type, d.embedding_model, d.embedded_on, d.created_on, c.name AS sender, c.role_dscr AS sender_role, c.is_district_staff AS is_from_district_staff, e.subject, e.sent_timestamp AS document_send_date, e.thread_id, a.file_path, email_is_replyto_document(e.email_id) AS reply_to_document_id, ( SELECT array_agg(rd.document_id) AS array_agg FROM email_related_emails(e.email_id, true, true) rd(email_id, global_message_id, document_id) WHERE rd.document_id IS NOT NULL) AS related_documents, ( SELECT array_agg(du.unit_id) AS array_agg FROM email_attachments att JOIN document_units du ON att.attachment_id = du.attachment_id WHERE att.email_id = d.email_id) AS attachments FROM document_units d JOIN emails e ON d.email_id = e.email_id JOIN contacts c ON e.sender_id = c.contact_id LEFT JOIN email_attachments a ON d.attachment_id = a.attachment_id);
*/